# Generated by Django 3.2.1 on 2022-05-26 06:51

import datetime
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import main.models.services.service_media
import main.models.trips.trip_media


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Agency',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, verbose_name='Название')),
                ('phone_number', models.CharField(blank=True, max_length=32, verbose_name='Телефон')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='E-Mail')),
                ('website', models.URLField(blank=True, verbose_name='Web-сайт')),
            ],
            options={
                'verbose_name': 'Агентство',
                'verbose_name_plural': 'Агентства',
            },
        ),
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, verbose_name='Название города')),
                ('region', models.CharField(blank=True, max_length=64, verbose_name='Регион')),
                ('country', models.CharField(max_length=64, verbose_name='Страна')),
                ('lat', models.FloatField(blank=True, null=True, verbose_name='Широта')),
                ('lon', models.FloatField(blank=True, null=True, verbose_name='Долгота')),
            ],
            options={
                'verbose_name': 'Город',
                'verbose_name_plural': 'Города',
                'permissions': [('manage_cities', 'Пользователь может управлять городами, но не удалять их (#наше)'), ('delete_cities', 'Пользователь может удалять города (#наше)')],
            },
        ),
        migrations.CreateModel(
            name='ClientAdatExtraInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('adat_id', models.BigIntegerField(verbose_name='ID')),
                ('company_name', models.CharField(blank=True, max_length=128, verbose_name='Компания')),
                ('source', models.CharField(blank=True, max_length=128, verbose_name='Источник')),
                ('source_additional_info', models.CharField(blank=True, max_length=256, verbose_name='Дополнительно об источнике')),
                ('preferred_communication_channel', models.CharField(blank=True, max_length=256, verbose_name='Предпочтительный канал связи')),
                ('tourists_count', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Количество гостей')),
                ('city', models.CharField(blank=True, max_length=32, verbose_name='Город')),
            ],
            options={
                'verbose_name': 'Дополнительная информация из БД АДАТ',
                'verbose_name_plural': 'Дополнительная информация из БД АДАТ',
            },
        ),
        migrations.CreateModel(
            name='ClientContract',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('contract_number', models.CharField(max_length=32, verbose_name='Номер договора')),
                ('base_price', models.DecimalField(decimal_places=2, max_digits=9, verbose_name='Базовая стоимость')),
                ('discount', models.DecimalField(decimal_places=2, default=0, max_digits=9, verbose_name='Скидка')),
                ('prepayment', models.DecimalField(decimal_places=2, default=0, max_digits=9, verbose_name='Предоплата')),
                ('sign_date', models.DateField(default=datetime.date.today, verbose_name='Дата подписания')),
            ],
            options={
                'verbose_name': 'Договор',
                'verbose_name_plural': 'Договоры',
            },
        ),
        migrations.CreateModel(
            name='Coupon',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('owner_full_name', models.CharField(max_length=128, verbose_name='ФИО покупателя')),
                ('number', models.CharField(max_length=16, verbose_name='Номер/код')),
                ('issue_date', models.DateField(default=django.utils.timezone.now, verbose_name='Дата продажи/публикации')),
                ('price', models.DecimalField(decimal_places=2, default=0, max_digits=9, verbose_name='Стоимость')),
                ('status', models.CharField(choices=[(None, '(Выберите статус)'), ('SOLD', 'Продан/выдан'), ('USED', 'Реализован')], max_length=16, verbose_name='Статус')),
                ('comment', models.TextField(blank=True, verbose_name='Комментарий')),
                ('is_active', models.BooleanField(default=True, verbose_name='Действующий')),
                ('created_at', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True, verbose_name='Дата создания')),
                ('modified_at', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True, verbose_name='Дата изменения')),
            ],
            options={
                'verbose_name': 'Купон',
                'verbose_name_plural': 'Купоны',
            },
        ),
        migrations.CreateModel(
            name='CouponRule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('coupon', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rules', to='main.coupon')),
            ],
            options={
                'verbose_name': 'Правило купона',
                'verbose_name_plural': 'Правила купонов',
            },
        ),
        migrations.CreateModel(
            name='DriverInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('driver_license_number', models.CharField(blank=True, max_length=32, verbose_name='Водительское удостоверение')),
                ('car_number', models.CharField(blank=True, max_length=32, verbose_name='Госномер')),
            ],
            options={
                'verbose_name': 'Данные о водителе',
                'verbose_name_plural': 'Данные о водителях',
            },
        ),
        migrations.CreateModel(
            name='Hotel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, verbose_name='Название')),
                ('address', models.CharField(blank=True, max_length=256, verbose_name='Адрес')),
                ('phone_number', models.CharField(blank=True, max_length=32, verbose_name='Телефон')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='E-mail')),
                ('website', models.URLField(blank=True, verbose_name='Официальный сайт')),
                ('lat', models.FloatField(blank=True, null=True, verbose_name='Широта')),
                ('lon', models.FloatField(blank=True, null=True, verbose_name='Долгота')),
                ('room_facilities', models.TextField(blank=True, verbose_name='Что есть в номерах')),
                ('comment', models.TextField(blank=True, verbose_name='Комментарий')),
                ('city', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='hotels', to='main.city')),
            ],
            options={
                'verbose_name': 'Гостиница',
                'verbose_name_plural': 'Гостиницы',
                'permissions': [('manage_hotels', 'Пользователь может управлять гостиницами, но не удалять их (#наше)'), ('delete_hotels', 'Пользователь может удалять гостиницы (#наше)'), ('manage_hotel_bookings', 'Пользователь может управлять бронированиями гостиниц (#наше)')],
            },
        ),
        migrations.CreateModel(
            name='HotelPreBooking',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateField(verbose_name='Дата заезда')),
                ('end_date', models.DateField(verbose_name='Дата выезда')),
                ('change_freeze_period', models.PositiveSmallIntegerField(default=10, verbose_name='Период бесплатной отмены/изменения брони')),
                ('comment', models.TextField(blank=True, verbose_name='Комментарий')),
                ('agency', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='hotel_pre_bookings', to='main.agency')),
                ('hotel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pre_bookings', to='main.hotel')),
            ],
            options={
                'verbose_name': 'Предварительное бронирование',
                'verbose_name_plural': 'Предварительные бронирования',
            },
        ),
        migrations.CreateModel(
            name='HotelPreBookingAndRoom',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count', models.PositiveSmallIntegerField(default=0, verbose_name='Количество')),
                ('hotel_pre_booking', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.hotelprebooking')),
            ],
            options={
                'verbose_name': 'Предварительное бронирование - комната',
                'verbose_name_plural': 'Предварительные бронирования - комнаты',
            },
        ),
        migrations.CreateModel(
            name='InboxClientData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('form_of_address', models.CharField(blank=True, max_length=16, verbose_name='Форма обращения')),
                ('surname', models.CharField(blank=True, max_length=32, verbose_name='Фамилия')),
                ('name', models.CharField(max_length=32, verbose_name='Имя')),
                ('middle_name', models.CharField(blank=True, max_length=32, verbose_name='Отчество')),
                ('sex', models.CharField(blank=True, choices=[(None, '(Выберите пол)'), ('M', 'м'), ('F', 'ж')], max_length=1, verbose_name='Пол')),
                ('date_birth', models.DateField(blank=True, null=True, verbose_name='Дата рождения')),
                ('place_birth', models.CharField(blank=True, max_length=256, verbose_name='Место рождения')),
                ('website', models.URLField(blank=True, verbose_name='Web-сайт')),
                ('food_preferences', models.TextField(blank=True, verbose_name='Предпочтения по питанию')),
                ('comment', models.TextField(blank=True, verbose_name='Комментарий')),
            ],
            options={
                'verbose_name': 'Анкета клиента',
                'verbose_name_plural': 'Анкеты клиентов',
            },
        ),
        migrations.CreateModel(
            name='LegalSupplierSocialNetworkContact',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('account', models.CharField(max_length=512, verbose_name='Аккаунт')),
                ('social_network', models.CharField(choices=[(None, '(Выберите социальную сеть)'), ('VK', 'ВКонтакте'), ('FACEBOOK', 'Facebook'), ('TWITTER', 'Twitter'), ('SKYPE', 'Skype'), ('INSTAGRAM', 'Instagram'), ('OPEN_LINE', 'Открытая линия'), ('TELEGRAM', 'Telegram'), ('OTHER', 'Другое')], max_length=16, verbose_name='Социальная сеть')),
            ],
            options={
                'verbose_name': 'Аккаунт юр. лица в соц. сети',
                'verbose_name_plural': 'Аккаунты юр. лиц в соц. сетях',
            },
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('form_of_address', models.CharField(blank=True, max_length=16, verbose_name='Форма обращения')),
                ('surname', models.CharField(blank=True, max_length=32, verbose_name='Фамилия')),
                ('name', models.CharField(max_length=32, verbose_name='Имя')),
                ('middle_name', models.CharField(blank=True, max_length=32, verbose_name='Отчество')),
                ('sex', models.CharField(blank=True, choices=[(None, '(Выберите пол)'), ('M', 'м'), ('F', 'ж')], max_length=1, verbose_name='Пол')),
                ('date_birth', models.DateField(blank=True, null=True, verbose_name='Дата рождения')),
                ('place_birth', models.CharField(blank=True, max_length=256, verbose_name='Место рождения')),
                ('website', models.URLField(blank=True, verbose_name='Web-сайт')),
                ('food_preferences', models.TextField(blank=True, verbose_name='Предпочтения по питанию')),
                ('comment', models.TextField(blank=True, verbose_name='Комментарий')),
                ('created_at', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True, verbose_name='Дата создания')),
                ('modified_at', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True, verbose_name='Дата изменения')),
                ('agency', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.agency')),
            ],
            options={
                'verbose_name': 'Персональные данные',
                'verbose_name_plural': 'Персональные данные',
            },
        ),
        migrations.CreateModel(
            name='Restaurant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, verbose_name='Название')),
                ('address', models.CharField(blank=True, max_length=256, verbose_name='Адрес')),
                ('phone_number', models.CharField(blank=True, max_length=32, verbose_name='Телефон')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='E-mail')),
                ('website', models.URLField(blank=True, verbose_name='Официальный сайт')),
                ('lat', models.FloatField(blank=True, null=True, verbose_name='Широта')),
                ('lon', models.FloatField(blank=True, null=True, verbose_name='Долгота')),
                ('comment', models.TextField(blank=True, verbose_name='Комментарий')),
                ('city', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='restaurants', to='main.city')),
            ],
            options={
                'verbose_name': 'Ресторан',
                'verbose_name_plural': 'Рестораны',
                'permissions': [('manage_restaurants', 'Пользователь может управлять ресторанами, но не удалять их (#наше)'), ('delete_restaurants', 'Пользователь может удалять рестораны (#наше)')],
            },
        ),
        migrations.CreateModel(
            name='Route',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256, verbose_name='Название')),
                ('description', models.TextField(blank=True, verbose_name='Описание')),
                ('is_archived', models.BooleanField(default=False, verbose_name='Архив')),
                ('duration_nights', models.PositiveSmallIntegerField(verbose_name='Длительность (ночей)')),
                ('agency', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='routes', to='main.agency')),
            ],
            options={
                'verbose_name': 'Маршрут',
                'verbose_name_plural': 'Маршруты',
                'ordering': ('name',),
                'permissions': [('manage_routes', 'Пользователь может управлять маршрутами (#наше)')],
            },
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256, verbose_name='Название')),
                ('address', models.CharField(blank=True, max_length=256, verbose_name='Адрес')),
                ('min_group_size', models.PositiveSmallIntegerField(default=1, verbose_name='Минимальный размер группы')),
                ('max_group_size', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Максимальный размер группы')),
                ('duration_minutes', models.PositiveSmallIntegerField(verbose_name='Длительность, мин')),
                ('description', models.TextField(blank=True, verbose_name='Описание')),
                ('agency', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='services', to='main.agency')),
                ('city', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='services', to='main.city')),
            ],
            options={
                'verbose_name': 'Услуга',
                'verbose_name_plural': 'Услуги',
                'permissions': [('manage_services', 'Пользователь может управлять услугами, но не удалять их (#наше)'), ('delete_services', 'Пользователь может удалять услуги (#наше)')],
            },
        ),
        migrations.CreateModel(
            name='Supplier',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256, verbose_name='Наименование')),
                ('full_name', models.CharField(blank=True, max_length=256, verbose_name='Полное наименование')),
                ('agency', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='service_suppliers', to='main.agency')),
            ],
            options={
                'verbose_name': 'Контрагент',
                'verbose_name_plural': 'Контрагенты',
                'permissions': [('manage_suppliers', 'Пользователь может управлять контрагентами, но не удалять их (#наше)'), ('delete_suppliers', 'Пользователь может удалять контрагентов (#наше)')],
            },
        ),
        migrations.CreateModel(
            name='Trip',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256, verbose_name='Название')),
                ('description', models.TextField(blank=True, verbose_name='Описание')),
                ('is_archived', models.BooleanField(default=False, verbose_name='Архив')),
                ('route_name', models.CharField(max_length=256, verbose_name='Название маршрута')),
                ('start_date', models.DateField(verbose_name='Дата начала')),
                ('end_date', models.DateField(verbose_name='Дата окончания')),
                ('max_tourists_count', models.PositiveSmallIntegerField(verbose_name='Максимальное количество гостей')),
                ('state', models.CharField(blank=True, choices=[(None, '(Статус)'), ('FORMING', 'Формируется'), ('FORMED', 'Сформирован'), ('ON_AGREEMENT', 'По согласованию'), ('CLOSED', 'Закрыт')], max_length=32, verbose_name='Статус')),
                ('price', models.DecimalField(decimal_places=2, max_digits=9, verbose_name='Стоимость')),
                ('agency', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='trips', to='main.agency')),
            ],
            options={
                'verbose_name': 'Тур',
                'verbose_name_plural': 'Туры',
                'permissions': [('plan_trips', 'Пользователь может планировать туры (#наше)'), ('manage_trip_status', 'Пользователь может редактировать статусы туров (#наше)'), ('manage_trip_tourists', 'Пользователь может редактировать гостей в турах (#наше)'), ('manage_trip_staff', 'Пользователь может редактировать гидов/водителей в турах (#наше)'), ('manage_trip_accommodation', 'Пользователь может управлять расселением гостей (#наше)'), ('view_trip_accommodation', 'Пользователь может просматривать страницу с расселением гостей (#наше)'), ('print_trip_reports', 'Пользователь может печатать отчёты по туру (#наше)'), ('print_client_contracts', 'Пользователь может печатать туристические договоры (#наше)')],
            },
        ),
        migrations.CreateModel(
            name='TripHotelVisit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateField(verbose_name='Дата заезда')),
                ('end_date', models.DateField(verbose_name='Дата выезда')),
                ('hotel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='trip_hotel_visits', to='main.hotel')),
                ('pre_bookings', models.ManyToManyField(blank=True, related_name='trip_hotel_visits', to='main.HotelPreBooking')),
                ('trip', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='trip_hotel_visits', to='main.trip')),
            ],
            options={
                'verbose_name': 'Заезд/выезд из гостиницы',
                'verbose_name_plural': 'Заезды/выезды из гостиниц',
            },
        ),
        migrations.CreateModel(
            name='TripRoommatesGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32, verbose_name='Уникальное имя (в рамках одного заезда)')),
                ('trip_hotel_visit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tourist_roommate_groups', to='main.triphotelvisit')),
            ],
            options={
                'verbose_name': 'Группа соседей по номеру',
                'verbose_name_plural': 'Группы соседей по номерам',
            },
        ),
        migrations.CreateModel(
            name='TripWorkerRoommatesGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32, verbose_name='Уникальное имя (в рамках одного заезда)')),
                ('is_room_needed', models.BooleanField(default=True, verbose_name='Нужен номер')),
                ('trip_hotel_visit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='worker_roommate_groups', to='main.triphotelvisit')),
            ],
            options={
                'verbose_name': 'Группа водителей/гидов - соседей по номеру',
                'verbose_name_plural': 'Группы водителей/гидов - соседей по номерам',
            },
        ),
        migrations.CreateModel(
            name='AgencyEmployee',
            fields=[
                ('person_ptr', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, related_name='agency_employee', serialize=False, to='main.person')),
                ('role', models.CharField(blank=True, choices=[(None, '(Выберите роль)'), ('ADMIN', 'Администратор'), ('MANAGER', 'Менеджер'), ('SERVICE_GUIDE', 'Сервисный гид'), ('TOUR_PLANNER', 'Разработчик туров')], max_length=32, verbose_name='Роль')),
            ],
            options={
                'verbose_name': 'Сотрудник агентства',
                'verbose_name_plural': 'Сотрудники агентств',
            },
            bases=('main.person',),
        ),
        migrations.CreateModel(
            name='Client',
            fields=[
                ('person', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, related_name='client', serialize=False, to='main.person')),
            ],
            options={
                'verbose_name': 'Клиент',
                'verbose_name_plural': 'Клиенты',
                'permissions': [('manage_clients', 'Пользователь может управлять персональными данными гостей (#наше)')],
            },
            bases=('main.person',),
        ),
        migrations.CreateModel(
            name='CouponExpirationRule',
            fields=[
                ('coupon_rule_ptr', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, related_name='expiration_rule', serialize=False, to='main.couponrule')),
                ('expires_after', models.DateField(verbose_name='Действителен до даты')),
            ],
            options={
                'verbose_name': 'Правило купона - срок действия',
                'verbose_name_plural': 'Правила купонов - сроки действия',
            },
            bases=('main.couponrule',),
        ),
        migrations.CreateModel(
            name='CouponMaxUsesRule',
            fields=[
                ('coupon_rule_ptr', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, related_name='max_uses_rule', serialize=False, to='main.couponrule')),
                ('max_uses_total', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Макс. общее число использований')),
                ('max_uses_per_user', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Макс. число использований каждым гостем')),
            ],
            options={
                'verbose_name': 'Правило купона - число использований',
                'verbose_name_plural': 'Правила купонов - число использований',
            },
            bases=('main.couponrule',),
        ),
        migrations.CreateModel(
            name='LegalSupplier',
            fields=[
                ('supplier', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, related_name='legal_supplier', serialize=False, to='main.supplier')),
                ('address', models.CharField(blank=True, max_length=256, verbose_name='Юридический адрес')),
                ('phone_number', models.CharField(blank=True, max_length=32, verbose_name='Телефон')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='E-mail')),
                ('website', models.URLField(blank=True, verbose_name='Официальный сайт')),
                ('lat', models.FloatField(blank=True, null=True, verbose_name='Широта')),
                ('lon', models.FloatField(blank=True, null=True, verbose_name='Долгота')),
                ('inn', models.CharField(blank=True, max_length=12, verbose_name='ИНН')),
                ('kpp', models.CharField(blank=True, max_length=9, verbose_name='КПП')),
                ('bank_details', models.TextField(blank=True, verbose_name='Банковские реквизиты')),
                ('comment', models.TextField(blank=True, verbose_name='Комментарий')),
            ],
            options={
                'verbose_name': 'Контрагент - юридическое лицо',
                'verbose_name_plural': 'Контрагенты - юридические лица',
            },
            bases=('main.supplier',),
        ),
        migrations.CreateModel(
            name='PersonSupplier',
            fields=[
                ('supplier', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, related_name='person_supplier', serialize=False, to='main.supplier')),
            ],
            options={
                'verbose_name': 'Контрагент - физическое лицо',
                'verbose_name_plural': 'Контрагенты - физические лица',
            },
            bases=('main.supplier',),
        ),
        migrations.CreateModel(
            name='TripWorker',
            fields=[
                ('person', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, related_name='trip_worker', serialize=False, to='main.person')),
                ('role', models.CharField(choices=[(None, '(Выберите специализацию)'), ('GUIDE', 'Гид'), ('DRIVER', 'Водитель'), ('DRIVER_GUIDE', 'Гид-водитель')], max_length=16, verbose_name='Специализация')),
            ],
            options={
                'verbose_name': 'Работник тура (водитель/гид)',
                'verbose_name_plural': 'Работники тура (водители/гиды)',
                'permissions': [('manage_workers', 'Пользователь может управлять персональными данными водителей/гидов (#наше)')],
            },
            bases=('main.person',),
        ),
        migrations.CreateModel(
            name='TripWorkerRoomReservation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('room_number', models.PositiveSmallIntegerField(verbose_name='Номер комнаты в отеле')),
                ('hotel_pre_booking_and_room', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='trip_worker_room_reservations', to='main.hotelprebookingandroom')),
                ('roommates_group', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='room_reservation', to='main.tripworkerroommatesgroup')),
            ],
            options={
                'verbose_name': 'Бронь номера для группы работников',
                'verbose_name_plural': 'Брони номеров для групп работников',
            },
        ),
        migrations.CreateModel(
            name='TripRoomReservation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('room_number', models.PositiveSmallIntegerField(verbose_name='Номер комнаты в отеле')),
                ('hotel_pre_booking_and_room', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tourist_room_reservations', to='main.hotelprebookingandroom')),
                ('roommates_group', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='room_reservation', to='main.triproommatesgroup')),
            ],
            options={
                'verbose_name': 'Бронь номера для группы туристов',
                'verbose_name_plural': 'Брони номеров для групп туристов',
            },
        ),
        migrations.CreateModel(
            name='TripRestaurantVisit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(verbose_name='Дата')),
                ('guide_contacts', models.CharField(max_length=256, verbose_name='Контакты гида')),
                ('comment', models.TextField(blank=True, verbose_name='Комментарий')),
                ('restaurant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='trip_restaurant_visits', to='main.restaurant')),
                ('trip', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='trip_restaurant_visits', to='main.trip')),
            ],
            options={
                'verbose_name': 'Ресторан - визит',
                'verbose_name_plural': 'Рестораны - визиты',
            },
        ),
        migrations.CreateModel(
            name='TripMedia',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to=main.models.utils.file_upload_path, verbose_name='Файл')),
                ('original_file_name', models.CharField(max_length=256, verbose_name='Исходное имя файла')),
                ('description', models.CharField(blank=True, max_length=256, verbose_name='Описание')),
                ('trip', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='trip_media_files', to='main.trip')),
            ],
            options={
                'verbose_name': 'Медиафайл в туре',
                'verbose_name_plural': 'Медиафайлы в турах',
            },
        ),
        migrations.CreateModel(
            name='TripDay',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day', models.PositiveSmallIntegerField(verbose_name='День тура')),
                ('caption', models.TextField(max_length=256, verbose_name='Краткое описание')),
                ('trip', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='days', to='main.trip')),
            ],
            options={
                'verbose_name': 'Тур - день',
                'verbose_name_plural': 'Туры - дни',
            },
        ),
        migrations.CreateModel(
            name='TripCompany',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32, verbose_name='Уникальное имя (в рамках одного тура)')),
                ('desired_room_type', models.CharField(choices=[('NONE', '—'), ('SINGLE', '1-местный (без подселения)'), ('SINGLE_BIG_BED', '1-местный с большой кроватью'), ('SINGLE_WITH_SHARING', '1 место в 2-местном'), ('DOUBLE', '2-местный (любой)'), ('DOUBLE_TWIN_BEDS', '2-местный с раздельными кроватями'), ('DOUBLE_BIG_BED', '2-местный с большой кроватью'), ('TRIPLE', '3-местный (любой)'), ('TRIPLE_THREE_BEDS', '3-местный с раздельными кроватями'), ('TRIPLE_BIG_BED', '3-местный с большой кроватью'), ('QUAD', '4-местный (любой)'), ('TWO_DOUBLE_ROOMS', 'Два 2-местных номера')], default='NONE', max_length=32, verbose_name='Тип размещения (по договору)')),
                ('trip', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='trip_companies', to='main.trip')),
            ],
            options={
                'verbose_name': 'Компания туристов',
                'verbose_name_plural': 'Компании туристов',
            },
        ),
        migrations.CreateModel(
            name='TripAndTripWorker',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('trip', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.trip')),
            ],
            options={
                'verbose_name': 'Тур - персонал',
                'verbose_name_plural': 'Туры - персонал',
            },
        ),
        migrations.CreateModel(
            name='TripAndService',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='День тура')),
                ('order_id', models.SmallIntegerField(default=-1)),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.service')),
                ('trip', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.trip')),
            ],
            options={
                'verbose_name': 'Тур - услуга',
                'verbose_name_plural': 'Туры - услуги',
                'ordering': ('order_id',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TripAndClient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('trip', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.trip')),
            ],
            options={
                'verbose_name': 'Тур - клиент',
                'verbose_name_plural': 'Туры - клиенты',
            },
        ),
        migrations.CreateModel(
            name='TripAndCity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day', models.PositiveSmallIntegerField(verbose_name='День тура')),
                ('objective', models.SmallIntegerField(choices=[(None, '(Выберите цель посещения)'), (1, 'Осмотр достопримечательностей'), (2, 'Ночёвка')], default=2, verbose_name='Цель посещения')),
                ('city', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.city')),
                ('trip', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.trip')),
            ],
            options={
                'verbose_name': 'Тур - город',
                'verbose_name_plural': 'Туры - города',
            },
        ),
        migrations.CreateModel(
            name='TripAirplaneTransfer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('transfer_type', models.CharField(choices=[(None, '(Выберите тип трансфера)'), ('ARRIVAL', 'Заезд'), ('DEPARTURE', 'Отъезд')], max_length=16, verbose_name='Тип трансфера')),
                ('date_time', models.DateTimeField(verbose_name='Дата/время')),
                ('need_transfer', models.BooleanField(default=False, verbose_name='Нужен трансфер')),
                ('comment', models.TextField(blank=True, verbose_name='Комментарий')),
                ('flight_number', models.CharField(blank=True, max_length=32, verbose_name='Номер рейса')),
                ('trip_and_client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transfers', to='main.tripandclient')),
            ],
            options={
                'verbose_name': 'Трансфер клиента',
                'verbose_name_plural': 'Трансферы клиентов',
            },
        ),
        migrations.AddField(
            model_name='trip',
            name='cities',
            field=models.ManyToManyField(blank=True, related_name='trips', through='main.TripAndCity', to='main.City'),
        ),
        migrations.AddField(
            model_name='trip',
            name='hotels',
            field=models.ManyToManyField(blank=True, related_name='trips', through='main.TripHotelVisit', to='main.Hotel'),
        ),
        migrations.AddField(
            model_name='trip',
            name='restaurants',
            field=models.ManyToManyField(blank=True, related_name='trips', through='main.TripRestaurantVisit', to='main.Restaurant'),
        ),
        migrations.AddField(
            model_name='trip',
            name='route',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='trips', to='main.route'),
        ),
        migrations.AddField(
            model_name='trip',
            name='services',
            field=models.ManyToManyField(blank=True, related_name='trips', through='main.TripAndService', to='main.Service'),
        ),
        migrations.CreateModel(
            name='ServicePrice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cost', models.DecimalField(decimal_places=2, max_digits=9, verbose_name='Стоимость')),
                ('price_type', models.SmallIntegerField(choices=[(None, '(Выберите категорию цены)'), (1, 'За одного гостя'), (2, 'За группу')], default=1, verbose_name='Категория цены')),
                ('start_date', models.DateField(default=datetime.date(1, 1, 1), verbose_name='Дата начала')),
                ('end_date', models.DateField(default=datetime.date(1, 12, 31), verbose_name='Дата окончания')),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='prices', to='main.service')),
            ],
            options={
                'verbose_name': 'Стоимость услуги',
                'verbose_name_plural': 'Стоимость услуг',
            },
        ),
        migrations.CreateModel(
            name='ServiceMedia',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to=main.models.utils.file_upload_path, verbose_name='Файл')),
                ('original_file_name', models.CharField(max_length=256, verbose_name='Исходное имя файла')),
                ('description', models.CharField(blank=True, max_length=256, verbose_name='Описание')),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='media_files', to='main.service')),
            ],
            options={
                'verbose_name': 'Медиафайл в услуге',
                'verbose_name_plural': 'Медиафайлы в услугах',
            },
        ),
        migrations.CreateModel(
            name='ServiceLabel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32, verbose_name='Имя')),
                ('description', models.TextField(blank=True, verbose_name='Описание')),
                ('color', models.CharField(default='#F57C00', max_length=32, verbose_name='Цвет')),
                ('agency', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='service_labels', to='main.agency')),
            ],
            options={
                'verbose_name': 'Тип услуги',
                'verbose_name_plural': 'Типы услуг',
                'ordering': ('name',),
            },
        ),
        migrations.AddField(
            model_name='service',
            name='labels',
            field=models.ManyToManyField(blank=True, related_name='services', to='main.ServiceLabel'),
        ),
        migrations.AddField(
            model_name='service',
            name='supplier',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='services', to='main.supplier'),
        ),
        migrations.CreateModel(
            name='RouteDay',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day', models.PositiveSmallIntegerField(verbose_name='День тура')),
                ('caption', models.TextField(max_length=256, verbose_name='Краткое описание')),
                ('route', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='days', to='main.route')),
            ],
            options={
                'verbose_name': 'Маршрут - день',
                'verbose_name_plural': 'Маршруты - дни',
            },
        ),
        migrations.CreateModel(
            name='RouteAndService',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='День тура')),
                ('order_id', models.SmallIntegerField(default=-1)),
                ('route', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.route')),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.service')),
            ],
            options={
                'verbose_name': 'Маршрут - услуга',
                'verbose_name_plural': 'Маршруты - услуги',
                'ordering': ('order_id',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RouteAndFood',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day', models.PositiveSmallIntegerField(verbose_name='День тура')),
                ('meal_type', models.CharField(choices=[(None, '(Выберите тип питания)'), ('NO', 'Без питания'), ('BB', 'Завтрак'), ('HB', 'Завтрак+ужин'), ('FB', 'Полный пансион')], max_length=2, verbose_name='Питание')),
                ('comment', models.TextField(blank=True, verbose_name='Комментарий')),
                ('route', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.route')),
            ],
            options={
                'verbose_name': 'Маршрут - питание',
                'verbose_name_plural': 'Маршруты - питание',
            },
        ),
        migrations.CreateModel(
            name='RouteAndCity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day', models.PositiveSmallIntegerField(verbose_name='День тура')),
                ('objective', models.SmallIntegerField(choices=[(None, '(Выберите цель посещения)'), (1, 'Осмотр достопримечательностей'), (2, 'Ночёвка')], default=2, verbose_name='Цель посещения')),
                ('city', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.city')),
                ('route', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.route')),
            ],
            options={
                'verbose_name': 'Маршрут - город',
                'verbose_name_plural': 'Маршруты - города',
            },
        ),
        migrations.AddField(
            model_name='route',
            name='cities',
            field=models.ManyToManyField(blank=True, related_name='routes', through='main.RouteAndCity', to='main.City'),
        ),
        migrations.AddField(
            model_name='route',
            name='services',
            field=models.ManyToManyField(blank=True, related_name='routes', through='main.RouteAndService', to='main.Service'),
        ),
        migrations.CreateModel(
            name='PersonSocialNetworkContact',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('account', models.CharField(max_length=512, verbose_name='Аккаунт')),
                ('social_network', models.CharField(choices=[(None, '(Выберите социальную сеть)'), ('VK', 'ВКонтакте'), ('FACEBOOK', 'Facebook'), ('TWITTER', 'Twitter'), ('SKYPE', 'Skype'), ('INSTAGRAM', 'Instagram'), ('OPEN_LINE', 'Открытая линия'), ('TELEGRAM', 'Telegram'), ('OTHER', 'Другое')], max_length=16, verbose_name='Социальная сеть')),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='social_network_contacts', to='main.person')),
            ],
            options={
                'verbose_name': 'Аккаунт в соц. сети',
                'verbose_name_plural': 'Аккаунты в соц. сетях персональные',
            },
        ),
        migrations.CreateModel(
            name='PersonRegistrationData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address', models.CharField(max_length=512, verbose_name='Адрес регистрации')),
                ('address_type', models.CharField(default='REGISTRATION_ADDRESS', editable=False, max_length=32, verbose_name='Тип адреса')),
                ('registration_date', models.DateField(blank=True, null=True, verbose_name='Дата регистрации')),
                ('person', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='registration_data', to='main.person')),
            ],
            options={
                'verbose_name': 'Адрес и дата регистрации',
                'verbose_name_plural': 'Адреса и даты регистрации',
            },
        ),
        migrations.CreateModel(
            name='PersonPhoneContact',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('phone_number', models.CharField(max_length=32, verbose_name='Телефон')),
                ('phone_type', models.CharField(choices=[(None, '(Выберите тип номера)'), ('WORK', 'Рабочий'), ('MOBILE', 'Мобильный'), ('HOME', 'Домашний'), ('PAGER', 'Пейджер'), ('FAX', 'Факс'), ('OTHER', 'Другой')], max_length=16, verbose_name='Тип номера')),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='phone_numbers', to='main.person')),
            ],
            options={
                'verbose_name': 'Телефон',
                'verbose_name_plural': 'Телефоны персональные',
            },
        ),
        migrations.CreateModel(
            name='PersonIdentityDocument',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('document_type', models.CharField(choices=[(None, '(Выберите вид документа)'), ('PASSPORT_RU', 'Паспорт РФ'), ('PASSPORT_ZAGRAN', 'Заграничный паспорт'), ('RESIDENCE_PERMIT', 'Вид на жительство иностранного гражданина'), ('BIRTH_CERTIFICATE', 'Свидетельство о рождении')], max_length=32, verbose_name='Вид документа')),
                ('document_series', models.CharField(blank=True, max_length=16, verbose_name='Серия')),
                ('document_number', models.CharField(max_length=32, verbose_name='Номер')),
                ('issued_by', models.CharField(blank=True, max_length=256, verbose_name='Выдан')),
                ('issue_date', models.DateField(blank=True, null=True, verbose_name='Дата выдачи')),
                ('issue_office_code', models.CharField(blank=True, max_length=8, verbose_name='Код подразделения')),
                ('person', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='passport', to='main.person')),
            ],
            options={
                'verbose_name': 'Удостоверение личности',
                'verbose_name_plural': 'Удостоверения личности',
            },
        ),
        migrations.CreateModel(
            name='PersonEmailContact',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=254, verbose_name='E-Mail')),
                ('email_type', models.CharField(choices=[(None, '(Выберите тип почты)'), ('WORK', 'Рабочий'), ('PERSONAL', 'Личный'), ('OTHER', 'Другой')], max_length=16, verbose_name='Тип почты')),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='emails', to='main.person')),
            ],
            options={
                'verbose_name': 'E-Mail',
                'verbose_name_plural': 'E-Mail-ы персональные',
            },
        ),
        migrations.CreateModel(
            name='PersonAddress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address', models.CharField(max_length=512, verbose_name='Адрес')),
                ('address_type', models.CharField(choices=[(None, '(Выберите тип адреса)'), ('REGISTRATION_ADDRESS', 'Адрес регистрации'), ('RESIDENTIAL_ADDRESS', 'Фактический адрес (проживания)'), ('LEGAL_ADDRESS', 'Юридический адрес'), ('DELIVERY_ADDRESS', 'Адрес доставки')], max_length=32, verbose_name='Тип адреса')),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='addresses', to='main.person')),
            ],
            options={
                'verbose_name': 'Адрес (кроме адреса регистрации)',
                'verbose_name_plural': 'Адреса (кроме адресов регистрации)',
            },
        ),
        migrations.CreateModel(
            name='MealOrder',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('meal_preferences', models.CharField(max_length=256, verbose_name='Заказ блюд')),
                ('restaurant_visit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='meal_orders', to='main.triprestaurantvisit')),
            ],
            options={
                'verbose_name': 'Заказ блюд',
                'verbose_name_plural': 'Заказы блюд',
            },
        ),
        migrations.CreateModel(
            name='InboxTripCompany',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Дата создания')),
                ('modified_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Дата изменения')),
                ('is_archived', models.BooleanField(default=False, verbose_name='Архив')),
                ('trip_company', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='inbox_trip_company', to='main.tripcompany')),
            ],
            options={
                'verbose_name': 'Анкета на компанию туристов',
                'verbose_name_plural': 'Анкеты на компании туристов',
            },
        ),
        migrations.CreateModel(
            name='InboxRegistrationData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address', models.CharField(max_length=512, verbose_name='Адрес регистрации')),
                ('address_type', models.CharField(default='REGISTRATION_ADDRESS', editable=False, max_length=32, verbose_name='Тип адреса')),
                ('registration_date', models.DateField(blank=True, null=True, verbose_name='Дата регистрации')),
                ('inbox_client_data', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='registration_data', to='main.inboxclientdata')),
            ],
            options={
                'verbose_name': 'Адрес и дата регистрации',
                'verbose_name_plural': 'Адреса и даты регистрации (в анкетах клиентов)',
            },
        ),
        migrations.CreateModel(
            name='InboxPhoneContact',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('phone_number', models.CharField(max_length=32, verbose_name='Телефон')),
                ('phone_type', models.CharField(choices=[(None, '(Выберите тип номера)'), ('WORK', 'Рабочий'), ('MOBILE', 'Мобильный'), ('HOME', 'Домашний'), ('PAGER', 'Пейджер'), ('FAX', 'Факс'), ('OTHER', 'Другой')], max_length=16, verbose_name='Тип номера')),
                ('inbox_client_data', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='phone_numbers', to='main.inboxclientdata')),
            ],
            options={
                'verbose_name': 'Телефон',
                'verbose_name_plural': 'Телефоны (в анкетах клиентов)',
            },
        ),
        migrations.CreateModel(
            name='InboxIdentityDocument',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('document_type', models.CharField(choices=[(None, '(Выберите вид документа)'), ('PASSPORT_RU', 'Паспорт РФ'), ('PASSPORT_ZAGRAN', 'Заграничный паспорт'), ('RESIDENCE_PERMIT', 'Вид на жительство иностранного гражданина'), ('BIRTH_CERTIFICATE', 'Свидетельство о рождении')], max_length=32, verbose_name='Вид документа')),
                ('document_series', models.CharField(blank=True, max_length=16, verbose_name='Серия')),
                ('document_number', models.CharField(max_length=32, verbose_name='Номер')),
                ('issued_by', models.CharField(blank=True, max_length=256, verbose_name='Выдан')),
                ('issue_date', models.DateField(blank=True, null=True, verbose_name='Дата выдачи')),
                ('issue_office_code', models.CharField(blank=True, max_length=8, verbose_name='Код подразделения')),
                ('inbox_client_data', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='passport', to='main.inboxclientdata')),
            ],
            options={
                'verbose_name': 'Удостоверение личности',
                'verbose_name_plural': 'Удостоверения личности (в анкетах клиентов)',
            },
        ),
        migrations.AddField(
            model_name='inboxclientdata',
            name='inbox_trip_company',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inbox_clients', to='main.inboxtripcompany'),
        ),
        migrations.CreateModel(
            name='HotelRoomType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256, verbose_name='Название номера')),
                ('room_type', models.CharField(choices=[(None, '(Выберите категорию номера)'), ('SINGLE', '1-местный (с маленькой кроватью)'), ('SINGLE_BIG_BED', '1-местный с большой кроватью'), ('DOUBLE_TWIN_BEDS', '2-местный с раздельными кроватями'), ('DOUBLE_BIG_BED', '2-местный с большой кроватью'), ('DOUBLE_UNIVERSAL', '2-местный универсальный'), ('TRIPLE_THREE_BEDS', '3-местный с раздельными кроватями'), ('TRIPLE_BIG_BED', '3-местный с большой кроватью'), ('TRIPLE_UNIVERSAL', '3-местный универсальный'), ('QUAD', '4-местный')], max_length=32, verbose_name='Категория номера')),
                ('total_area', models.FloatField(blank=True, null=True, verbose_name='Площадь')),
                ('rooms_count', models.PositiveSmallIntegerField(default=1, verbose_name='Число комнат')),
                ('min_adults_count', models.PositiveSmallIntegerField(default=1, verbose_name='Минимальное число взрослых гостей')),
                ('max_adults_count', models.PositiveSmallIntegerField(verbose_name='Максимальное число взрослых гостей')),
                ('max_children_count', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Максимальное число детей')),
                ('price', models.DecimalField(blank=True, decimal_places=2, max_digits=9, null=True, verbose_name='Цена')),
                ('price_single', models.DecimalField(blank=True, decimal_places=2, max_digits=9, null=True, verbose_name='Цена за одноместное размещение')),
                ('comment', models.TextField(blank=True, verbose_name='Другие особенности номера')),
                ('hotel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='room_types', to='main.hotel')),
            ],
            options={
                'verbose_name': 'Тип номера',
                'verbose_name_plural': 'Типы номеров',
            },
        ),
        migrations.AddField(
            model_name='hotelprebookingandroom',
            name='room_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.hotelroomtype'),
        ),
        migrations.AddField(
            model_name='hotelprebooking',
            name='rooms',
            field=models.ManyToManyField(blank=True, related_name='pre_bookings', through='main.HotelPreBookingAndRoom', to='main.HotelRoomType'),
        ),
        migrations.CreateModel(
            name='Discount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.DecimalField(decimal_places=2, max_digits=9, verbose_name='Величина скидки')),
                ('discount_type', models.CharField(choices=[(None, '(Выберите вид скидки)'), ('FIXED_AMOUNT', 'Фиксированная (в рублях)'), ('PERCENT', 'В % от стоимости тура'), ('FREE_DAYS', 'Дни в подарок')], max_length=16, verbose_name='Вид скидки')),
                ('agency', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='discounts', to='main.agency')),
            ],
            options={
                'verbose_name': 'Скидка',
                'verbose_name_plural': 'Скидки',
            },
        ),
        migrations.CreateModel(
            name='CouponUsageInTrip',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True, verbose_name='Дата создания')),
                ('contract', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='used_coupons', to='main.clientcontract')),
                ('coupon', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='coupon_usages_in_trips', to='main.coupon')),
            ],
            options={
                'verbose_name': 'Купон - реализация в туре',
                'verbose_name_plural': 'Купоны - реализации в турах',
            },
        ),
        migrations.CreateModel(
            name='CouponUsageAsReferral',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True, verbose_name='Дата создания')),
                ('coupon', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='coupon_usages_as_referrals', to='main.coupon')),
            ],
            options={
                'verbose_name': 'Купон - реализация в виде реферальной ссылки',
                'verbose_name_plural': 'Купоны - реализации в виде реферальных ссылок',
            },
        ),
        migrations.CreateModel(
            name='CouponLabel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32, verbose_name='Наименование')),
                ('label_type', models.CharField(choices=[(None, '(Выберите тип купона)'), ('CERTIFICATE', 'Сертификат'), ('PROMO_CODE', 'Промокод'), ('OTHER', 'Другое')], max_length=16, verbose_name='Тип купона')),
                ('description', models.TextField(blank=True, verbose_name='Описание')),
                ('agency', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='coupon_labels', to='main.agency')),
            ],
            options={
                'verbose_name': 'Тип купона',
                'verbose_name_plural': 'Типы купонов',
            },
        ),
        migrations.AddField(
            model_name='coupon',
            name='discount',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='coupon', to='main.discount'),
        ),
        migrations.AddField(
            model_name='coupon',
            name='label',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='coupons', to='main.couponlabel'),
        ),
        migrations.CreateModel(
            name='ClientContractAndService',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('price_type', models.SmallIntegerField(choices=[(None, '(Выберите категорию цены)'), (1, 'За одного гостя'), (2, 'За группу')], default=1, verbose_name='Категория цены')),
                ('trip_day', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(1)], verbose_name='День тура')),
                ('tourist_count', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(1)], verbose_name='Количество гостей, заказавших услугу')),
                ('cost', models.DecimalField(decimal_places=2, max_digits=9, verbose_name='Фактическая стоимость')),
                ('order_id', models.SmallIntegerField(default=-1)),
                ('contract', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.clientcontract')),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.service')),
                ('trip_and_service', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='main.tripandservice')),
            ],
            options={
                'verbose_name': 'Договор - услуга',
                'verbose_name_plural': 'Договоры - услуги',
                'ordering': ('order_id',),
            },
        ),
        migrations.AddField(
            model_name='clientcontract',
            name='services',
            field=models.ManyToManyField(blank=True, related_name='client_contracts', through='main.ClientContractAndService', to='main.Service'),
        ),
        migrations.AddField(
            model_name='clientcontract',
            name='trip_company',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='client_contract', to='main.tripcompany'),
        ),
        migrations.AddConstraint(
            model_name='city',
            constraint=models.UniqueConstraint(fields=('name', 'region', 'country'), name='main_city_name_is_unique'),
        ),
        migrations.AddConstraint(
            model_name='agency',
            constraint=models.UniqueConstraint(fields=('name',), name='main_agency_name_is_unique'),
        ),
        migrations.AddField(
            model_name='tripworkerroommatesgroup',
            name='roommates',
            field=models.ManyToManyField(blank=True, related_name='roommate_groups', to='main.TripWorker'),
        ),
        migrations.AddField(
            model_name='triproommatesgroup',
            name='roommates',
            field=models.ManyToManyField(blank=True, related_name='roommate_groups', to='main.Client'),
        ),
        migrations.AddField(
            model_name='triprestaurantvisit',
            name='tourists',
            field=models.ManyToManyField(blank=True, related_name='trip_restaurant_visits', through='main.MealOrder', to='main.Client'),
        ),
        migrations.AddConstraint(
            model_name='tripmedia',
            constraint=models.UniqueConstraint(fields=('trip', 'file'), name='main_tripmedia_is_unique'),
        ),
        migrations.AddConstraint(
            model_name='triphotelvisit',
            constraint=models.UniqueConstraint(fields=('trip', 'hotel', 'start_date'), name='main_triphotelvisit_is_unique'),
        ),
        migrations.AddConstraint(
            model_name='tripday',
            constraint=models.UniqueConstraint(fields=('trip', 'day'), name='main_tripday_is_unique'),
        ),
        migrations.AddField(
            model_name='tripcompany',
            name='tourists',
            field=models.ManyToManyField(blank=True, related_name='trip_companies', to='main.Client'),
        ),
        migrations.AddField(
            model_name='tripandtripworker',
            name='worker',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.tripworker'),
        ),
        migrations.AddConstraint(
            model_name='tripandservice',
            constraint=models.UniqueConstraint(fields=('trip', 'service', 'day'), name='main_tripandservice_is_unique'),
        ),
        migrations.AddField(
            model_name='tripandclient',
            name='client',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.client'),
        ),
        migrations.AddConstraint(
            model_name='tripandcity',
            constraint=models.UniqueConstraint(fields=('trip', 'city', 'day', 'objective'), name='main_tripandcity_is_unique'),
        ),
        migrations.AddConstraint(
            model_name='tripairplanetransfer',
            constraint=models.UniqueConstraint(fields=('trip_and_client', 'transfer_type'), name='main_tripairplanetransfer_is_unique'),
        ),
        migrations.AddField(
            model_name='trip',
            name='tourists',
            field=models.ManyToManyField(blank=True, related_name='trips', through='main.TripAndClient', to='main.Client'),
        ),
        migrations.AddField(
            model_name='trip',
            name='workers',
            field=models.ManyToManyField(blank=True, related_name='trips', through='main.TripAndTripWorker', to='main.TripWorker'),
        ),
        migrations.AddConstraint(
            model_name='servicemedia',
            constraint=models.UniqueConstraint(fields=('service', 'file'), name='main_servicemedia_is_unique'),
        ),
        migrations.AddConstraint(
            model_name='servicelabel',
            constraint=models.UniqueConstraint(fields=('agency', 'name'), name='main_servicelabel_is_unique'),
        ),
        migrations.AddConstraint(
            model_name='routeday',
            constraint=models.UniqueConstraint(fields=('route', 'day'), name='main_routeday_is_unique'),
        ),
        migrations.AddConstraint(
            model_name='routeandservice',
            constraint=models.UniqueConstraint(fields=('route', 'service', 'day'), name='main_routeandservice_is_unique'),
        ),
        migrations.AddConstraint(
            model_name='routeandfood',
            constraint=models.UniqueConstraint(fields=('route', 'day'), name='main_routeandfood_is_unique'),
        ),
        migrations.AddConstraint(
            model_name='routeandcity',
            constraint=models.UniqueConstraint(fields=('route', 'city', 'day', 'objective'), name='main_routeandcity_is_unique'),
        ),
        migrations.AddConstraint(
            model_name='route',
            constraint=models.UniqueConstraint(fields=('agency', 'name'), name='main_route_name_is_unique'),
        ),
        migrations.AddConstraint(
            model_name='restaurant',
            constraint=models.UniqueConstraint(fields=('city', 'name'), name='main_restaurant_name_is_unique'),
        ),
        migrations.AddField(
            model_name='personsupplier',
            name='person',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='person_supplier', to='main.person'),
        ),
        migrations.AddConstraint(
            model_name='personsocialnetworkcontact',
            constraint=models.UniqueConstraint(fields=('person', 'social_network', 'account'), name='main_personsocialnetworkcontact_is_unique'),
        ),
        migrations.AddConstraint(
            model_name='personphonecontact',
            constraint=models.UniqueConstraint(fields=('person', 'phone_type', 'phone_number'), name='main_personphonecontact_is_unique'),
        ),
        migrations.AddConstraint(
            model_name='personidentitydocument',
            constraint=models.UniqueConstraint(fields=('document_type', 'document_series', 'document_number'), name='main_personidentitydocument_is_unique'),
        ),
        migrations.AddConstraint(
            model_name='personemailcontact',
            constraint=models.UniqueConstraint(fields=('person', 'email_type', 'email'), name='main_personemailcontact_is_unique'),
        ),
        migrations.AddConstraint(
            model_name='personaddress',
            constraint=models.UniqueConstraint(fields=('person', 'address_type'), name='main_personaddress_is_unique'),
        ),
        migrations.AddField(
            model_name='person',
            name='created_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_persons', to='main.agencyemployee'),
        ),
        migrations.AddField(
            model_name='person',
            name='modified_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='modified_persons', to='main.agencyemployee'),
        ),
        migrations.AddField(
            model_name='mealorder',
            name='client',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='meal_orders', to='main.client'),
        ),
        migrations.AddField(
            model_name='legalsuppliersocialnetworkcontact',
            name='supplier',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='social_network_contacts', to='main.legalsupplier'),
        ),
        migrations.AddField(
            model_name='inboxclientdata',
            name='client',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='inbox_client_data_set', to='main.client'),
        ),
        migrations.AddConstraint(
            model_name='hotelroomtype',
            constraint=models.UniqueConstraint(fields=('hotel', 'name'), name='main_hotelroomtype_name_is_unique'),
        ),
        migrations.AddConstraint(
            model_name='hotelprebookingandroom',
            constraint=models.UniqueConstraint(fields=('hotel_pre_booking', 'room_type'), name='main_hotelprebookingandroom_is_unique'),
        ),
        migrations.AddConstraint(
            model_name='hotel',
            constraint=models.UniqueConstraint(fields=('city', 'name'), name='main_hotel_name_is_unique'),
        ),
        migrations.AddField(
            model_name='driverinfo',
            name='driver',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='driver_info', to='main.tripworker'),
        ),
        migrations.AddField(
            model_name='couponusageintrip',
            name='created_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_coupon_usages_in_trips', to='main.agencyemployee'),
        ),
        migrations.AddField(
            model_name='couponusageasreferral',
            name='created_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_coupon_usages_as_referrals', to='main.agencyemployee'),
        ),
        migrations.AddField(
            model_name='couponusageasreferral',
            name='used_by',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='coupon_referral', to='main.client'),
        ),
        migrations.AddConstraint(
            model_name='couponlabel',
            constraint=models.UniqueConstraint(fields=('agency', 'name'), name='main_couponlabel_is_unique'),
        ),
        migrations.AddField(
            model_name='coupon',
            name='created_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_coupons', to='main.agencyemployee'),
        ),
        migrations.AddField(
            model_name='coupon',
            name='modified_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='modified_coupons', to='main.agencyemployee'),
        ),
        migrations.AddField(
            model_name='coupon',
            name='owner',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='owned_coupons', to='main.client'),
        ),
        migrations.AddConstraint(
            model_name='clientcontractandservice',
            constraint=models.UniqueConstraint(fields=('contract', 'trip_and_service'), name='main_clientcontractandservice_is_unique'),
        ),
        migrations.AddField(
            model_name='clientcontract',
            name='customer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='client_contracts', to='main.client'),
        ),
        migrations.AddField(
            model_name='clientadatextrainfo',
            name='person',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='adat_extra_info', to='main.client'),
        ),
        migrations.AddField(
            model_name='client',
            name='responsible_person',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='clients', to='main.agencyemployee'),
        ),
        migrations.AddField(
            model_name='agencyemployee',
            name='user',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='agency_employee', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddConstraint(
            model_name='tripworkerroommatesgroup',
            constraint=models.UniqueConstraint(fields=('trip_hotel_visit', 'name'), name='main_tripworkerroommatesgroup_is_unique'),
        ),
        migrations.AddConstraint(
            model_name='triproommatesgroup',
            constraint=models.UniqueConstraint(fields=('trip_hotel_visit', 'name'), name='main_triproommatesgroup_is_unique'),
        ),
        migrations.AddConstraint(
            model_name='triprestaurantvisit',
            constraint=models.UniqueConstraint(fields=('trip', 'restaurant', 'date'), name='main_triprestaurantvisit_is_unique'),
        ),
        migrations.AddConstraint(
            model_name='tripcompany',
            constraint=models.UniqueConstraint(fields=('trip', 'name'), name='main_tripcompany_is_unique'),
        ),
        migrations.AddConstraint(
            model_name='tripandtripworker',
            constraint=models.UniqueConstraint(fields=('trip', 'worker'), name='main_tripandtripworker_is_unique'),
        ),
        migrations.AddConstraint(
            model_name='tripandclient',
            constraint=models.UniqueConstraint(fields=('trip', 'client'), name='main_tripandclient_is_unique'),
        ),
        migrations.AddConstraint(
            model_name='trip',
            constraint=models.UniqueConstraint(fields=('agency', 'start_date', 'name'), name='main_trip_name_is_unique'),
        ),
        migrations.AddConstraint(
            model_name='mealorder',
            constraint=models.UniqueConstraint(fields=('restaurant_visit', 'client'), name='main_mealorder_is_unique'),
        ),
        migrations.AddConstraint(
            model_name='legalsuppliersocialnetworkcontact',
            constraint=models.UniqueConstraint(fields=('supplier', 'social_network', 'account'), name='main_legalsuppliersocialnetworkcontact_is_unique'),
        ),
        migrations.AddConstraint(
            model_name='inboxclientdata',
            constraint=models.UniqueConstraint(fields=('inbox_trip_company', 'client'), name='main_inboxclientdata_is_unique'),
        ),
        migrations.AddConstraint(
            model_name='couponusageintrip',
            constraint=models.UniqueConstraint(fields=('coupon', 'contract'), name='main_couponusageintrip_is_unique'),
        ),
        migrations.AddConstraint(
            model_name='coupon',
            constraint=models.UniqueConstraint(fields=('label', 'number'), name='main_coupon_is_unique'),
        ),
        migrations.AddConstraint(
            model_name='clientcontract',
            constraint=models.UniqueConstraint(fields=('contract_number',), name='main_clientcontract_is_unique'),
        ),
        migrations.AddConstraint(
            model_name='clientadatextrainfo',
            constraint=models.UniqueConstraint(fields=('adat_id',), name='main_clientadatextrainfo_is_unique'),
        ),
    ]
